generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AccountType {
  TWO_STEP
  THREE_STEP
}

enum AccountStatus {
  CHALLENGE
  FUNDED
  BREACHED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String?
  country   String?  @default("")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileLevel Int     @default(0)
  kycVerified  Boolean @default(false)

  twoFactorCode    String?
  twoFactorSecret  String?
  ascii            String?
  otpUrl           String?
  twoFactorExpires DateTime?

  resetToken       String?
  resetTokenExpiry DateTime?

  phoneNumber       String?
  displayStatsLive  Boolean @default(false)
  phoneNotification Boolean @default(false)
  emailNotification Boolean @default(false)

  address     String?
  dateOfBirth DateTime?

  referralCode  String?
  referredBy    String?
  referralBonus Float   @default(0.0)
  totalEarned   Float   @default(0.0)

  accounts        Account[]
  PaymentCard     PaymentCard[]
  AccountInvoices AccountInvoices[]

  @@map("users")
}

model Account {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  accountType   AccountType // 2 step, 3 step
  accountSize   String // 1k, 5k, 10k, 50k, 100k
  status        AccountStatus // Challenge, Funded, Breached
  balance       Float // Store account balance
  accountNumber String // Store account number

  paymentMethod  String? // Store payment method details
  user           User?            @relation(fields: [userId], references: [id])
  billingAddress BillingAddress[]
  paymentCard    PaymentCard[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AccountInvoices AccountInvoices[]

  @@map("accounts")
}

model ReferralHistory {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  referredUserId String  @db.ObjectId
  orderValue     Float?
  orderNumber    String?
  commission     Float?
  status         String?

  createdAt DateTime @default(now())

  @@map("referralhistory")
}

model BillingAddress {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  accountId String @db.ObjectId

  firstName String
  lastName  String
  email     String
  phone     String
  country   String
  state     String
  city      String
  zipCode   String
  address   String

  account Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billingaddress")
}

model PaymentCard {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  accountId String @db.ObjectId
  userId    String @db.ObjectId

  cardNumber String // Store encrypted card number
  cardExpiry String
  country    String
  zipCode    String
  cardCvv    String // Store encrypted cvv

  account Account @relation(fields: [accountId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paymentcard")
}

model AccountInvoices {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  accountId String @db.ObjectId
  userId    String @db.ObjectId
  paymentCardId String @db.ObjectId

  invoiceNumber String
  amount        Float
  status        String
  paymentMethod String
  paymentDate   DateTime

  account Account @relation(fields: [accountId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accountinvoices")
}
